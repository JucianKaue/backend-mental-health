// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String @id @default(uuid())
  name            String?
  email           String @unique
  password        String
  profile_picture String?
  created_at      DateTime @default(now())
  updated_at      DateTime? @updatedAt
  deleted_at      DateTime?

  EmotionalRegulationTechnique EmotionalRegulationTechnique[]
  UserPlans UserPlans[]
  EmotionalRegulationHistory EmotionalRegulationHistory[]

  @@map("users")
}

model EmotionalRegulationTechnique {
  id          String @id @unique
  name        String 
  description String
  category    String
  video_url   String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  created_by String @map("created_by")
  user User @relation(fields: [created_by], references: [id])

  @@map("emotional_regulation_techniques")
}

model Plans {
  id          String @id @unique
  name        String 
  price       BigInt
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  UserPlans UserPlans[]

  @@map("plans")
  EmotionalRegulationHistory EmotionalRegulationHistory[]
}

model UserPlans {
  id          String @id @unique
  userId      String @map("user_id")
  planId      String @map("plan_id")
  status      String
  startDate   DateTime  @map("start_date")
  endDate     DateTime?  @map("end_date")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")


  plan Plans @relation(fields: [planId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@map("user_plans")
}


model EmotionalRegulationHistory {
  id   String @id @unique
  userId String @map("user_id")
  emotionalRegulationTechniqueId String @map("emotional_regulation_technique_id")
  emotionalState  String
  desiredState    String
  availableTime   Int
  location        String 
  rating          Int?
  feedback        String?
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime? @updatedAt @map("updated_at")
  deletedAt       DateTime? @map("deleted_at")

  user User @relation(fields: [userId], references: [id])
  emotionalRegulationTechnique Plans @relation(fields: [emotionalRegulationTechniqueId], references: [id])

  @@map("emotional_regulation_history")
}